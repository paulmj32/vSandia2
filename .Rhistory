rsq_mlr = format(round(cor(mlr_predictions, y_test)^2, 3), nsmall = 3)
asd = vip(mlr, n = 20)
#imp.new = asd$data$Importance/sum(asd$data$Importance)
#asd$data$Importance = imp.new
plot(asd)
asdf = data.frame(mlr$coefficients)
## BART RIBBON
#Figure model accuracy
color_bart = c("black", "#35B779FF", "#440154FF")
color_bart = c("black", "#F8766D", "#00BFC4")
lty_bart = c(1, 1, 1)
alpha_bart = c(1, 0.9, 0.75)
bart_ci = round(calc_credible_intervals(bart_fit, X_test, ci_conf = 0.95), 2)
bart_ribbon = data.frame(
lower = bart_ci[,1],
upper = bart_ci[,2]
)
if (length(na_test) > 0) {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred)[-c(na_test)],
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)[-c(na_test)]
)
} else {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred),
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
}
bb = bind_cols(bb, bart_ribbon)
if (length(na_test) > 0) {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred)[-c(na_test)],
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)[-c(na_test)]
)
} else {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred),
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
}
bb = bind_cols(bb, bart_ribbon)
bb = arrange(bb, actual)
bb$index = seq.int(nrow(bb))
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr')
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr')
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr' | Model != 'eNet')
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr' | Model != 'eNet')
View(bb_all)
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr' & Model != 'eNet')
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc
save.image("~/vSandia2/DeepDive/hurricanes/hurricane_pct2.RData")
load("~/vSandia2/DeepDive/hurricanes/hurricane_hrs.RData")
#### Machine learning
options(java.parameters = "-Xmx10g")
library(bartMachine)
library(tidyverse)
library(tidymodels)
library(tidycensus)
library(sf)
library(xgboost)
library(parallel)
library(doParallel)
library(vip)
library(spdep)
library(pdp)
# library(drat) # these are used to install hurricaneexposure
# addRepo("geanders")
# install.packages("hurricaneexposuredata")
library(hurricaneexposuredata)
library(hurricaneexposure)
library(spatialreg)
library(gstat)
library(ggpubr)
library(grid)
library(gridExtra)
library(cowplot)
#regular MLR
df_mlr =  X_train %>%
mutate(y = y_train)
mlr = lm(y ~ ., data = df_mlr)
summary(mlr)
mlr_predictions = predict(mlr, newdata = X_test)
rsq_mlr = format(round(cor(mlr_predictions, y_test)^2, 3), nsmall = 3)
asd = vip(mlr, n = 20)
#imp.new = asd$data$Importance/sum(asd$data$Importance)
#asd$data$Importance = imp.new
plot(asd)
asdf = data.frame(mlr$coefficients)
## BART RIBBON
#Figure model accuracy
color_bart = c("black", "#35B779FF", "#440154FF")
color_bart = c("black", "#F8766D", "#00BFC4")
lty_bart = c(1, 1, 1)
alpha_bart = c(1, 0.9, 0.75)
bart_ci = round(calc_credible_intervals(bart_fit, X_test, ci_conf = 0.95), 2)
bart_ribbon = data.frame(
lower = bart_ci[,1],
upper = bart_ci[,2]
)
if (length(na_test) > 0) {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred)[-c(na_test)],
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)[-c(na_test)]
)
} else {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred),
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
}
bb = bind_cols(bb, bart_ribbon)
bb = arrange(bb, actual)
bb$index = seq.int(nrow(bb))
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr' & Model != 'eNet' & Model != 'xgb')
if (length(na_test) > 0) {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred)[-c(na_test)],
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)[-c(na_test)]
)
} else {
bb = dplyr::tibble(actual = y_test,
#eNet = as.vector(lre_predictions$.pred),
bart = as.vector(bart_predictions),
mlr = as.vector(mlr_predictions),
#rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
}
bb = bind_cols(bb, bart_ribbon)
bb = arrange(bb, actual)
bb$index = seq.int(nrow(bb))
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr' & Model != 'eNet' & Model != 'xgb')
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
,#bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
,#bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
,#bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc
load("~/vSandia2/DeepDive/hurricanes/hurricane_pct2.RData")
bb_all = gg_all %>%
dplyr::filter(Model != 'mlr' & Model != 'eNet' & Model != 'xgb')
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
#ylab("Max %Customers Out (ln)") +
#ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc
bb_acc = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_ribbon(data = bb, aes(x = index, ymin = lower, ymax = upper), fill = color_bart[2], alpha = 0.32) +
geom_line(data = bb_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_bart,
labels = c("Actual",
bquote("BART (" * R^2 ~ "=" ~ .(rsq_bart) * ")")
#,bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * ")")
),
name = element_blank()) +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Index (County x Tropical Cyclone)") +
ylab("Hours (ln)") +
ggtitle("Outage Duration: Test Sample") +
ylab("Max %Customers Out (ln)") +
ggtitle("Customers w/o Power: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
bb_acc
