tune_grid(resamples = df_cv,
grid = lre_grid,
metrics = metric_set(yardstick::rmse, yardstick::rsq),
control = tune::control_grid(verbose = T, allow_par = T, parallel_over = "resamples")
) #parallel processing turns off verbose
stopCluster(cl)
unregister_dopar()
show_best(lre_tune, metric = "rmse")
lre_tune_results = lre_tune %>% collect_metrics()
lre_best = lre_tune %>% select_best(metric = "rmse")
lre_fit = lre_work %>%
finalize_workflow(lre_best) %>%
last_fit(df_split)
lre_test = lre_fit %>% collect_metrics() #metrics evaluated on test sample (b/c last_fit() function)
lre_predictions = lre_fit %>% collect_predictions() #predictions for test sample (b/c last_fit() function)
show_model_info("boost_tree")
xgb_model = boost_tree(mode = "regression", trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(), loss_reduction = tune(), mtry = tune()) %>%
set_engine(engine = "xgboost") %>%
translate()
xgb_work = workflow() %>%
add_recipe(recipe_mine) %>%
add_model(xgb_model)
set.seed(32); xgb_grid = dials::grid_max_entropy(parameters(trees(), min_n(), tree_depth(), learn_rate(), loss_reduction(), finalize(mtry(), df_preds)), size = 100)
cl = makeCluster(num_cores, type = "FORK")
registerDoParallel(cl, cores = num_cores)
xgb_tune = xgb_work %>%
tune_grid(resamples = df_cv,
grid = xgb_grid,
metrics = metric_set(yardstick::rmse, yardstick::rsq),
control = tune::control_grid(verbose = T, allow_par = T, parallel_over = "resamples")
) #parallel processing turns off verbose
stopCluster(cl)
unregister_dopar()
show_best(xgb_tune, metric = "rmse")
xgb_tune_results = xgb_tune %>% collect_metrics()
xgb_best = xgb_tune %>% select_best(metric = "rmse")
xgb_fit = xgb_work %>%
finalize_workflow(xgb_best) %>%
last_fit(df_split)
xgb_test = xgb_fit %>% collect_metrics() #metrics evaluated on test sample (b/c last_fit() function)
xgb_predictions = xgb_fit %>% collect_predictions() #predictions for test sample (b/c last_fit() function)
save.image("~/vSandia2/Data/ML_cust.RData")
### Random Forest ##############################################################
show_model_info("rand_forest")
rf_model = rand_forest(mtry = tune(), trees = tune(), min_n = tune()) %>%
set_engine("ranger", importance = "permutation") %>%
set_mode("regression") %>%
translate()
rf_work = workflow() %>%
add_recipe(recipe_mine) %>%
add_model(rf_model)
#rf_grid = expand.grid(mtry = c(5, 10, 20), trees = c(100, 500, 1000), min_n = c(3, 5, 10))
set.seed(32); rf_grid = dials::grid_max_entropy(parameters(min_n(), trees(), finalize(mtry(), df_preds)), size = 60)
cl = makeCluster(num_cores, type = "FORK")
registerDoParallel(cl, cores = num_cores)
rf_tune = rf_work %>%
tune_grid(resamples = df_cv,
grid = rf_grid,
metrics = metric_set(yardstick::rmse, yardstick::rsq),
control = tune::control_grid(verbose = T)#, allow_par = T, parallel_over = "resamples") #parallel processing turns off verbose
)
stopCluster(cl)
unregister_dopar()
show_best(rf_tune, metric = "rmse")
rf_tune_results = rf_tune %>% collect_metrics()
rf_best = rf_tune %>% select_best(metric = "rmse")
rf_fit = rf_work %>%
finalize_workflow(rf_best) %>%
last_fit(df_split)
rf_test = rf_fit %>% collect_metrics() #metrics evaluated on test sample (b/c last_fit() function)
rf_predictions = rf_fit %>% collect_predictions() #predictions for test sample (b/c last_fit() function)
save.image("~/vSandia2/Data/ML_cust.RData")
y_test = df_test$ln_cust
rsq_lre = paste(lre_test %>% dplyr::filter(.metric == "rsq") %>% pull(.estimate) %>% round(3) %>% format(nsmall = 3))
rsq_xgb = paste(xgb_test %>% dplyr::filter(.metric == "rsq") %>% pull(.estimate) %>% round(3) %>% format(nsmall = 3))
rsq_rf = paste(rf_test %>% dplyr::filter(.metric == "rsq") %>% pull(.estimate) %>% round(3) %>% format(nsmall = 3))
cverror_lre = paste(show_best(lre_tune, metric = "rmse") %>% dplyr::slice(1) %>% pull(mean) %>% round(3) %>% format(nsmall = 3))
cverror_xgb = paste(show_best(xgb_tune, metric = "rmse") %>% dplyr::slice(1) %>% pull(mean) %>% round(3) %>% format(nsmall = 3))
cverror_rf = paste(show_best(rf_tune, metric = "rmse") %>% dplyr::slice(1) %>% pull(mean) %>% round(3) %>% format(nsmall = 3))
### PLOTTING - Duration Hours
gg = dplyr::tibble(actual = df_test$ln_hrs,
eNet = as.vector(lre_predictions$.pred),
rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
#gg = gg %>% filter(eNet < 20)
#gg$mean = mean(gg$actual, na.rm = T)
gg_actual = gg %>% dplyr::select(index, actual)
gg_pred = gg %>% dplyr::select(-actual) %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
gg_all = gg %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
color_vec= c("black", "#FDE725FF", "#35B779FF")
color_vec = c("black", "#FDE725FF", "#35B779FF", "#440154FF")
lty_vec = c(1, 1, 1)
lty_vec = c(1, 1, 1, 1)
alpha_vec = c(1, 0.7, 0.7)
alpha_vec = c(1, 0.7, 0.7, 0.7)
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Outage Duration (log-hrs)") +
scale_y_continuous(labels = function(x) paste0(x), limits = c(2, 10)) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2(gg)
### PLOTTING - Max Customer Outages
gg = dplyr::tibble(actual = df_test$ln_cust,
eNet = as.vector(lre_predictions$.pred),
rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
#gg = gg %>% filter(eNet < 20)
#gg$mean = mean(gg$actual, na.rm = T)
gg_actual = gg %>% dplyr::select(index, actual)
gg_pred = gg %>% dplyr::select(-actual) %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
### PLOTTING - Max Customer Outages
gg = dplyr::tibble(actual = df_test$ln_cust,
eNet = as.vector(lre_predictions$.pred),
rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
#gg = gg %>% filter(eNet < 20)
#gg$mean = mean(gg$actual, na.rm = T)
gg_actual = gg %>% dplyr::select(index, actual)
gg_pred = gg %>% dplyr::select(-actual) %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
gg_all = gg %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
color_vec= c("black", "#FDE725FF", "#35B779FF")
color_vec = c("black", "#FDE725FF", "#35B779FF", "#440154FF")
lty_vec = c(1, 1, 1)
lty_vec = c(1, 1, 1, 1)
alpha_vec = c(1, 0.7, 0.7)
alpha_vec = c(1, 0.7, 0.7, 0.7)
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Outage Duration (log-#cust)") +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2(gg)
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Outage Duration (log-#cust)") +
scale_y_continuous(labels = function(x) paste0(x)) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2(gg)
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Outage Duration (log-#cust)") +
scale_y_continuous(labels = function(x) paste0(x), limits = c(0,15)) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2(gg)
load("~/vSandia2/Data/ML_pct.RData")
#### PLOT AND ANALYZE RESULTS OF ML
library(tidyverse)
library(tidymodels)
library(sf)
library(parallel)
library(doParallel)
#### PLOT AND ANALYZE RESULTS OF ML
library(tidyverse)
library(tidymodels)
library(sf)
library(parallel)
library(doParallel)
## Testing results
#y_test = df_hours %>% slice(-df_split$in_id) %>% dplyr::select(ln_hrs) %>% pull()
y_test = df_test$pct_cust
## Testing results
#y_test = df_hours %>% slice(-df_split$in_id) %>% dplyr::select(ln_hrs) %>% pull()
y_test = df_test$pct_cust
rsq_lre = paste(lre_test %>% dplyr::filter(.metric == "rsq") %>% pull(.estimate) %>% round(3) %>% format(nsmall = 3))
rsq_xgb = paste(xgb_test %>% dplyr::filter(.metric == "rsq") %>% pull(.estimate) %>% round(3) %>% format(nsmall = 3))
rsq_rf = paste(rf_test %>% dplyr::filter(.metric == "rsq") %>% pull(.estimate) %>% round(3) %>% format(nsmall = 3))
cverror_lre = paste(show_best(lre_tune, metric = "rmse") %>% dplyr::slice(1) %>% pull(mean) %>% round(3) %>% format(nsmall = 3))
cverror_xgb = paste(show_best(xgb_tune, metric = "rmse") %>% dplyr::slice(1) %>% pull(mean) %>% round(3) %>% format(nsmall = 3))
cverror_rf = paste(show_best(rf_tune, metric = "rmse") %>% dplyr::slice(1) %>% pull(mean) %>% round(3) %>% format(nsmall = 3))
### PLOTTING - Max Customer Outages
gg = dplyr::tibble(actual = y_test,
eNet = as.vector(lre_predictions$.pred),
rf = as.vector(rf_predictions$.pred),
xgb = as.vector(xgb_predictions$.pred)
)
gg = arrange(gg, actual)
gg$index = seq.int(nrow(gg))
#gg = gg %>% filter(eNet < 20)
#gg$mean = mean(gg$actual, na.rm = T)
gg_actual = gg %>% dplyr::select(index, actual)
gg_pred = gg %>% dplyr::select(-actual) %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
gg_all = gg %>% pivot_longer(!index, names_to = "Model", values_to = "ypred")
color_vec= c("black", "#FDE725FF", "#35B779FF")
color_vec = c("black", "#FDE725FF", "#35B779FF", "#440154FF")
lty_vec = c(1, 1, 1)
lty_vec = c(1, 1, 1, 1)
alpha_vec = c(1, 0.7, 0.7)
alpha_vec = c(1, 0.7, 0.7, 0.7)
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Outage Duration (log-#cust)") +
scale_y_continuous(labels = function(x) paste0(x), limits = c(0,15)) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2(gg)
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Customers Out (pct)") +
scale_y_continuous(labels = function(x) paste0(x),
limits = c(0,15)
) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2 <- function(df) {
p = ggplot() +
theme_classic() +
geom_hline(yintercept = mean(gg$actual, na.rm = T), linetype="dashed", color = "gray50", alpha = 0.85) +
geom_line(data = gg_all, aes(x = index, y = ypred, color = Model, lty = Model, alpha = Model)) +
scale_color_manual(
values = color_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_linetype_manual(
values = lty_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
scale_alpha_manual(
values = alpha_vec,
labels = c("Actual",
bquote("eNET (" * R^2 ~ "=" ~ .(rsq_lre) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_lre) * ")"),
bquote("RF (" * R^2 ~ "=" ~ .(rsq_rf) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_rf) * ")"),
bquote("XGB (" * R^2 ~ "=" ~ .(rsq_xgb) * "," ~ RMSE[cv] ~ "=" ~ .(cverror_xgb) * ")")
),
name = element_blank()) +
ylab("Customers Out (pct)") +
scale_y_continuous(labels = function(x) paste0(x),
#limits = c(0,15)
) +
xlab("Outage Index (event x county)") +
#ggtitle("County-Level Predictions: Test Sample\nNo 'Total' Variables") +
ggtitle("County-Level Predictions: Test Sample") +
# guides(
#   color = guide_legend(order = 2),
#   shape = guide_legend(order = 1),
#   linetype = guide_legend(order = 2)
# ) +
theme(legend.spacing.y = unit(-0.25, "cm"),
legend.direction = "vertical",
legend.box = "vertical",
legend.position = c(.225, .8),
plot.title = element_text(hjust = 0.5)
)
print(p)
}
plot_filtering_estimates2(gg)
