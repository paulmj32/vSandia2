dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15)
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
str_remove_all(Feature, "[_}") %>%
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15)
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
str_remove_all(Feature, "[_]") %>%
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15)
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature_clean = str_remove(Feature, "_"))
df_imp
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature_clean = str_replace(Feature, "_", " "))
df_imp
?tolower
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature_clean = str_replace(Feature, "_", " ")) %>%
mutate(Feature_clean2 = tolower(Feature_clean))
df_imp
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature1 = str_replace(Feature, "_", " ")) %>%
mutate(Feature2 = tolower(Feature1))
df_imp
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
mutate(Feature = case_when(Feature == "max_humidity_10M" ~ "max_humidity10M")) %>% #name correction
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature1 = str_replace(Feature, "_", " ")) %>%
mutate(Feature2 = tolower(Feature1))
df_imp
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
mutate(Feature = case_when(Feature == "max_humidity_10M" ~ "max_humidity10M",
TRUE ~ as.character(Feature)
)) %>% #name correction
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature1 = str_replace(Feature, "_", " ")) %>%
mutate(Feature2 = tolower(Feature1))
df_imp
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
mutate(Feature = case_when(Feature == "max_humidity_10M" ~ "max_humidity10M", TRUE ~ as.character(Feature))) %>% #name correction
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature1 = str_replace(Feature, "_", " ")) %>%
mutate(Feature2 = tolower(Feature1)) %>%
mutate(Feature_clean = str_to_title(Feature2))
df_imp
df_imp = importance %>%
mutate(cat = case_when(
Feature %in% c("delta_WIND10M", "delta_vapor", "delta_T10M", "delta_pressure",
"max_humidity_10M", "max_T10M", "max_WIND10M",
"spi03", "spi06", "spi12", "spi24") ~ "Weather",
Feature %in% c("Barren", "Cultivated", "Forest", "Herbaceous", "Shrub", "Water", "Wetlands",
"DEM_sd", "DEM_min", "RZ_med", "RZ_mode") ~ "Environment",
TRUE ~ "Socio-Economic"
)) %>%
mutate(Feature = case_when(Feature == "max_humidity_10M" ~ "max_humidity10M", TRUE ~ as.character(Feature))) %>% #name correction
dplyr::arrange(desc(Gain)) %>%
dplyr::slice(1:15) %>%
mutate(Feature1 = str_replace(Feature, "_", " ")) %>%
mutate(Feature2 = tolower(Feature1)) %>%
mutate(Feature_clean = str_to_title(Feature2)) %>%
dplyr::select(-c(Feature1, Feature2))
pp2 = ggplot() +
theme_classic() +
geom_col(data = df_imp, aes(x = Gain, y = fct_reorder(Feature_clean, Gain), fill = cat, color = cat),
alpha = .75) +
xlab("Importance") +
ylab(element_blank()) +
ggtitle("Hurricane Outage Duration: Variable Importance (XGB)") +
labs(fill = "Variable Type", color = "Variable Type") +
guides(fill = guide_legend(byrow = T), color = guide_legend(byrow = T)) +
theme(
plot.title = element_text(hjust = 0.5),
legend.spacing.y = unit(0.33, "cm"),
legend.position = c(.85, .4)
)
pp2
save.image("~/vSandia2/DeepDive/hurricane/hurricane_hrs.RData")
pp2 = ggplot() +
theme_classic() +
geom_col(data = df_imp, aes(x = Gain, y = fct_reorder(Feature_clean, Gain), fill = cat, color = cat),
alpha = .75) +
xlab("Importance") +
ylab(element_blank()) +
ggtitle("Variable Importance (XGB): Hurricane Outage Duration") +
labs(fill = "Variable Type", color = "Variable Type") +
guides(fill = guide_legend(byrow = T), color = guide_legend(byrow = T)) +
theme(
plot.title = element_text(hjust = 0.5),
legend.spacing.y = unit(0.33, "cm"),
legend.position = c(.85, .4)
)
pp2
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10m", ice = F, center = F,
plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression")
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10M", ice = F, center = F,
plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression")
pdp1
pp2 = ggplot() +
theme_classic() +
geom_col(data = df_imp, aes(x = Gain, y = fct_reorder(Feature_clean, Gain), fill = cat, color = cat),
alpha = .75) +
xlab("Importance") +
ylab(element_blank()) +
ggtitle("Variable Importance (XGB): Hurricane Outage Duration") +
labs(fill = "Variable Type", color = "Variable Type") +
guides(fill = guide_legend(byrow = T), color = guide_legend(byrow = T)) +
theme(
plot.title = element_text(hjust = 0.5),
legend.spacing.y = unit(0.33, "cm"),
legend.position = c(.8, .4)
)
pp2
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10M", ice = F, center = F,
plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression", xlab = "Delta")
pdp1
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10M", ice = F, center = F,
plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression")
plot(pdp1, xlab = "Delta")
plot(pdp1, ylab = "Delta")
autoplot.partial(pdp1)
?pdp
library(pdp)
?autoplot(pdp1)
autoplot(pdp1)
?autoplot
?pdp:autoplot
?partial
?pdp:partial
?pdp::partial
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10M", ice = F, center = F,
plot = F, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression")
autoplot(pdp1)
ggpdp1 = ggplot() +
geom_line(rename(pdp1, variable = 1), aes(x = variable, y = yhat))
ggpdp1 = ggplot() +
geom_line(rename(pdp1, variable = 1), aes(x = "variable", y = yhat))
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10M", ice = F, center = F,
plot = F, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression") %>%
rename(iv = 1)
##########################################################################################################
##### PARTIAL DEPENDENCE PLOTS (PDPs) - FINAL MODEL ######################################################
##########################################################################################################
pdp1 = pdp::partial(final_obj, pred.var = "delta_WIND10M", ice = F, center = F,
plot = F, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression") %>%
rename(IV = 1)
ggpdp1 = ggplot() +
geom_line(pdp1, aes(x = IV, y = yhat))
ggpdp1 = ggplot() +
geom_line(data = pdp1, aes(x = IV, y = yhat))
ggpdp1
ggpdp1 = ggplot() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = pdp1, sides = "b")
ggpdp1
ggpdp1 = ggplot() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = pdp1, aes(x = IV, y = yhat), sides = "b")
ggpdp1
hist(pdp1$IV)
hist(X_train$delta_WIND10M)
ggpdp1 = ggplot() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
theme_minimal() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
theme_classic() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
theme_classic2() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
theme_bw() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
theme_classic() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b")
ggpdp1
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2)
?grid.arrange
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2, name = "Partial Dependence Plots")
?grid.arrange
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2, main = "Partial Dependence Plots")
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2, main = paste("Partial Dependence Plots"))
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2)
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots"))
#                     train = X_train, type = "regression")
# pdp7 = pdp::partial(final_obj, pred.var = "PATTACHRES", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
# pdp8 = pdp::partial(final_obj, pred.var = "QHLTH65", ice = F, center = F,
#                     plot = T, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
#                     train = X_train, type = "regression")
#
# grid.arrange(pdp1, pdp2, pdp3, pdp4, ncol = 2)
# grid.arrange(pdp5, pdp6, pdp7, pdp8, ncol = 2)
library(grid)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots"))
library(gridExtra)
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots"))
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots"), gp = gpar(fontsize=16))
top = textGrob("Partial Dependence Plots", gp = gpar(fontsize=16))
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots", gp = gpar(fontsize=16)))
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots", gp = gpar(fontsize=16)))
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots"))
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.75)
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.55)
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.45, color = "gray")
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.45, color = "blue")
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.45, color = "black")
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.25, color = "black")
ggpdp1
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.33, color = "black")
ggpdp1
pdp2 = pdp::partial(final_obj, pred.var = "delta_vapor", ice = F, center = F,
plot = F, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression") %>%
rename(IV = 1)
ggpdp2 = ggplot() +
theme_gray() +
geom_line(data = pdp2, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_vapor), sides = "b", alpha = 0.33, color = "black")
ggpdp2
pdp3 = pdp::partial(final_obj, pred.var = "delta_T10M", ice = F, center = F,
plot = F, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression") %>%
rename(IV = 1)
ggpdp3 = ggplot() +
theme_gray() +
geom_line(data = pdp3, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_T10M), sides = "b", alpha = 0.33, color = "black")
ggpdp3
pdp4 = pdp::partial(final_obj, pred.var = "delta_pressure", ice = F, center = F,
plot = F, rug= T, alpha = 0.1, #plot.engine = "ggplot2",
train = X_train, type = "regression") %>%
rename(IV = 1)
ggpdp4 = ggplot() +
theme_gray() +
geom_line(data = pdp4, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_pressure), sides = "b", alpha = 0.33, color = "black")
ggpdp4
ggpdp1 = ggplot() +
theme_gray() +
geom_line(data = pdp1, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_WIND10M), sides = "b", alpha = 0.33, color = "black") +
xlab("Delta Wind10m")
ggpdp1
ggpdp2 = ggplot() +
theme_gray() +
geom_line(data = pdp2, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_vapor), sides = "b", alpha = 0.33, color = "black") +
xlab("Delta Vapor")
ggpdp2
ggpdp3 = ggplot() +
theme_gray() +
geom_line(data = pdp3, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_T10M), sides = "b", alpha = 0.33, color = "black") +
xlab("Delta T10m")
ggpdp3
ggpdp4 = ggplot() +
theme_gray() +
geom_line(data = pdp4, aes(x = IV, y = yhat)) +
geom_rug(data = X_train, aes(x = delta_pressure), sides = "b", alpha = 0.33, color = "black") +
xlab("Delta Pressure")
ggpdp4
grid.arrange(ggpdp1, ggpdp1, ggpdp1, ggpdp1, ncol = 2,
top = textGrob("Partial Dependence Plots"))
grid.arrange(ggpdp1, ggpdp2, ggpdp3, ggpdp4, ncol = 2,
top = textGrob("Partial Dependence Plots"))
save.image("~/vSandia2/DeepDive/hurricane/hurricane_hrs.RData")
fill_vec = c("#CEB966", "#A379BB", "#6BB1C9")
fill_vec = c("#CEB966", "#A379BB", "#6BB1C9")
pp2 = ggplot() +
theme_classic() +
geom_col(data = df_imp, aes(x = Gain, y = fct_reorder(Feature_clean, Gain), fill = cat, color = cat),
alpha = .75) +
scale_fill_manual(values = fill_vec) +
scale_color_manual(values = fill_vec) +
xlab("Importance") +
ylab(element_blank()) +
ggtitle("Variable Importance (XGB): Hurricane Outage Duration") +
labs(fill = "Variable Type", color = "Variable Type") +
guides(fill = guide_legend(byrow = T), color = guide_legend(byrow = T)) +
theme(
plot.title = element_text(hjust = 0.5),
legend.spacing.y = unit(0.33, "cm"),
legend.position = c(.8, .4)
)
pp2
bart_vimp = investigate_var_importance(bart_fit)
